<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="memory_management_8c" kind="file" language="C++">
    <compoundname>memoryManagement.c</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="memory_management_8h" local="yes">memoryManagement.h</includes>
    <incdepgraph>
      <node id="28">
        <label>src/memoryManagement.c</label>
        <link refid="memoryManagement.c"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>stdlib.h</label>
      </node>
      <node id="30">
        <label>memoryManagement.h</label>
        <link refid="memory_management_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>stddef.h</label>
      </node>
      <node id="33">
        <label>string.h</label>
      </node>
      <node id="31">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" prot="public" static="no" mutable="no">
        <type></type>
        <definition>in</definition>
        <argsstring></argsstring>
        <name>in</name>
        <initializer>= <ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="36" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="36" bodyend="-1"/>
        <referencedby refid="memory_management_8h_1ae30a35d507593a3635856b601305dd38" compoundref="memory_management_8c" startline="53" endline="85">memory_alloc</referencedby>
        <referencedby refid="memory_management_8h_1ac30901f2f52d2898523245fe4ad744a0" compoundref="memory_management_8c" startline="128" endline="139">create_node</referencedby>
      </memberdef>
      <memberdef kind="variable" id="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>areaIndex</definition>
        <argsstring></argsstring>
        <name>areaIndex</name>
        <initializer>= <ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="37" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="37" bodyend="-1"/>
        <referencedby refid="memory_management_8h_1ac30901f2f52d2898523245fe4ad744a0" compoundref="memory_management_8c" startline="128" endline="139">create_node</referencedby>
        <referencedby refid="memory_management_8h_1a0ee12c76feab0bfc62d67af9989f828d" compoundref="memory_management_8c" startline="221" endline="254">check_for_chunk_space</referencedby>
      </memberdef>
      <memberdef kind="variable" id="memory_management_8c_1a7d545f1851a11aa5a292886d35957bdc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>sizeOfNode</definition>
        <argsstring></argsstring>
        <name>sizeOfNode</name>
        <initializer>= sizeof( struct <ref refid="struct__info__area" kindref="compound">_info_area</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="38" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="38" bodyend="-1"/>
        <referencedby refid="memory_management_8h_1ac30901f2f52d2898523245fe4ad744a0" compoundref="memory_management_8c" startline="128" endline="139">create_node</referencedby>
        <referencedby refid="memory_management_8h_1a0ee12c76feab0bfc62d67af9989f828d" compoundref="memory_management_8c" startline="221" endline="254">check_for_chunk_space</referencedby>
      </memberdef>
      <memberdef kind="variable" id="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct__info__area" kindref="compound">_info_area</ref> *</type>
        <definition>struct _info_area* head</definition>
        <argsstring></argsstring>
        <name>head</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="39" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="39" bodyend="-1"/>
        <referencedby refid="memory_management_8h_1a4445092804b80242b5a1c124978837e8" compoundref="memory_management_8c" startline="152" endline="180">memory_information</referencedby>
        <referencedby refid="memory_management_8h_1a8a12d29f1824bf7225965e8b35a0f3a8" compoundref="memory_management_8c" startline="194" endline="205">memory_free</referencedby>
        <referencedby refid="memory_management_8h_1a0ee12c76feab0bfc62d67af9989f828d" compoundref="memory_management_8c" startline="221" endline="254">check_for_chunk_space</referencedby>
        <referencedby refid="memory_management_8h_1a3e2309af44a44009e20dea96b76a5f06" compoundref="memory_management_8c" startline="330" endline="344">memory_size</referencedby>
        <referencedby refid="memory_management_8h_1a5e16e5d3309afde94b8d6f9fc6f2364a" compoundref="memory_management_8c" startline="357" endline="391">display_list</referencedby>
      </memberdef>
      <memberdef kind="variable" id="memory_management_8c_1addbea52120befa5218ab585272604dd5" prot="public" static="no" mutable="no">
        <type>struct <ref refid="struct__info__area" kindref="compound">_info_area</ref> *</type>
        <definition>struct _info_area * current</definition>
        <argsstring></argsstring>
        <name>current</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="39" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="39" bodyend="-1"/>
        <referencedby refid="memory_management_8h_1a95bbb648d6b9dcbeb6377570f5dde789" compoundref="memory_management_8c" startline="99" endline="115">add_node_to_list</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="memory_management_8c_1ae30a35d507593a3635856b601305dd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* memory_alloc</definition>
        <argsstring>(int size)</argsstring>
        <name>memory_alloc</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="53" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="53" bodyend="85"/>
        <references refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" compoundref="memory_management_8h" startline="45">INITIAL_ZERO</references>
        <references refid="memory_management_8c_1a0ee12c76feab0bfc62d67af9989f828d" compoundref="memory_management_8c" startline="221" endline="254">check_for_chunk_space</references>
        <references refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" compoundref="user_8c" startline="29">MAX_SIZE</references>
        <references refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" compoundref="memory_management_8c" startline="36">in</references>
        <references refid="memory_management_8c_1ae134f9f03edd9c11c52eb9e3887911da" compoundref="memory_management_8c" startline="99" endline="115">add_node_to_list</references>
        <references refid="memory_management_8c_1ac30901f2f52d2898523245fe4ad744a0" compoundref="memory_management_8c" startline="128" endline="139">create_node</references>
        <referencedby refid="memory_management_8h_1a9fddae3713297adcee22fae422fe4383" compoundref="memory_management_8c" startline="268" endline="279">memory_calloc</referencedby>
        <referencedby refid="memory_management_8h_1aeae46c0f1bc40e0e3b469f40feefd8d0" compoundref="memory_management_8c" startline="294" endline="318">memory_realloc</referencedby>
        <referencedby refid="user_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="user_8c" startline="87" endline="207">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1ae134f9f03edd9c11c52eb9e3887911da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref></type>
        <definition>status add_node_to_list</definition>
        <argsstring>(struct _info_area *newNode)</argsstring>
        <name>add_node_to_list</name>
        <param>
          <type>struct <ref refid="struct__info__area" kindref="compound">_info_area</ref> *</type>
          <declname>newNode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="99" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="99" bodyend="115"/>
        <references refid="memory_management_8c_1addbea52120befa5218ab585272604dd5" compoundref="memory_management_8c" startline="39">current</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <references refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" compoundref="memory_management_8h" startline="55">TRUE</references>
        <referencedby refid="memory_management_8h_1ae30a35d507593a3635856b601305dd38" compoundref="memory_management_8c" startline="53" endline="85">memory_alloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1ac30901f2f52d2898523245fe4ad744a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="struct__info__area" kindref="compound">_info_area</ref> *</type>
        <definition>struct _info_area* create_node</definition>
        <argsstring>(int size)</argsstring>
        <name>create_node</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="128" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="128" bodyend="139"/>
        <references refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" compoundref="memory_management_8c" startline="37">areaIndex</references>
        <references refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" compoundref="memory_management_8h" startline="67">_info_area::start</references>
        <references refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" compoundref="memory_management_8c" startline="36">in</references>
        <references refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" compoundref="memory_management_8h" startline="66">_info_area::status</references>
        <references refid="memory_management_8h_1a07f4c6f14c1c3bcd57756a5e3a41e3bd" compoundref="memory_management_8h" startline="47">FILLED</references>
        <references refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" compoundref="memory_management_8h" startline="68">_info_area::end</references>
        <references refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" compoundref="memory_management_8h" startline="46">EXCESS</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <references refid="memory_management_8c_1a7d545f1851a11aa5a292886d35957bdc" compoundref="memory_management_8c" startline="38">sizeOfNode</references>
        <referencedby refid="memory_management_8h_1ae30a35d507593a3635856b601305dd38" compoundref="memory_management_8c" startline="53" endline="85">memory_alloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1a4445092804b80242b5a1c124978837e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref></type>
        <definition>status memory_information</definition>
        <argsstring>()</argsstring>
        <name>memory_information</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="152" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="152" bodyend="180"/>
        <references refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" compoundref="memory_management_8h" startline="45">INITIAL_ZERO</references>
        <references refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" compoundref="memory_management_8c" startline="39">head</references>
        <references refid="memory_management_8h_1a07f4c6f14c1c3bcd57756a5e3a41e3bd" compoundref="memory_management_8h" startline="47">FILLED</references>
        <references refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" compoundref="memory_management_8h" startline="66">_info_area::status</references>
        <references refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" compoundref="memory_management_8h" startline="68">_info_area::end</references>
        <references refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" compoundref="memory_management_8h" startline="67">_info_area::start</references>
        <references refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" compoundref="memory_management_8h" startline="46">EXCESS</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <references refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" compoundref="user_8c" startline="29">MAX_SIZE</references>
        <references refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" compoundref="memory_management_8h" startline="55">TRUE</references>
        <referencedby refid="user_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="user_8c" startline="87" endline="207">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1a8a12d29f1824bf7225965e8b35a0f3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref></type>
        <definition>status memory_free</definition>
        <argsstring>(void *pointer)</argsstring>
        <name>memory_free</name>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="194" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="194" bodyend="205"/>
        <references refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" compoundref="memory_management_8c" startline="39">head</references>
        <references refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" compoundref="memory_management_8h" startline="67">_info_area::start</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <references refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" compoundref="memory_management_8h" startline="66">_info_area::status</references>
        <references refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" compoundref="memory_management_8h" startline="48">EMPTY</references>
        <references refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" compoundref="memory_management_8h" startline="55">TRUE</references>
        <referencedby refid="memory_management_8h_1aeae46c0f1bc40e0e3b469f40feefd8d0" compoundref="memory_management_8c" startline="294" endline="318">memory_realloc</referencedby>
        <referencedby refid="user_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="user_8c" startline="87" endline="207">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1a0ee12c76feab0bfc62d67af9989f828d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* check_for_chunk_space</definition>
        <argsstring>(int size)</argsstring>
        <name>check_for_chunk_space</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="221" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="221" bodyend="254"/>
        <references refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" compoundref="memory_management_8c" startline="39">head</references>
        <references refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" compoundref="memory_management_8h" startline="66">_info_area::status</references>
        <references refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" compoundref="memory_management_8h" startline="48">EMPTY</references>
        <references refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" compoundref="memory_management_8h" startline="68">_info_area::end</references>
        <references refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" compoundref="memory_management_8h" startline="67">_info_area::start</references>
        <references refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" compoundref="memory_management_8h" startline="46">EXCESS</references>
        <references refid="memory_management_8h_1a07f4c6f14c1c3bcd57756a5e3a41e3bd" compoundref="memory_management_8h" startline="47">FILLED</references>
        <references refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" compoundref="memory_management_8c" startline="37">areaIndex</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <references refid="memory_management_8c_1a7d545f1851a11aa5a292886d35957bdc" compoundref="memory_management_8c" startline="38">sizeOfNode</references>
        <referencedby refid="memory_management_8h_1ae30a35d507593a3635856b601305dd38" compoundref="memory_management_8c" startline="53" endline="85">memory_alloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1a9fddae3713297adcee22fae422fe4383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* memory_calloc</definition>
        <argsstring>(int nelem, int elsize)</argsstring>
        <name>memory_calloc</name>
        <param>
          <type>int</type>
          <declname>nelem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="268" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="268" bodyend="279"/>
        <references refid="memory_management_8c_1ae30a35d507593a3635856b601305dd38" compoundref="memory_management_8c" startline="53" endline="85">memory_alloc</references>
        <referencedby refid="user_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="user_8c" startline="87" endline="207">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1aeae46c0f1bc40e0e3b469f40feefd8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* memory_realloc</definition>
        <argsstring>(void *ptr, int size)</argsstring>
        <name>memory_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="294" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="294" bodyend="318"/>
        <references refid="memory_management_8c_1ae30a35d507593a3635856b601305dd38" compoundref="memory_management_8c" startline="53" endline="85">memory_alloc</references>
        <references refid="memory_management_8c_1a401d53c4641dc4f12bc3251d36d1bfe3" compoundref="memory_management_8c" startline="330" endline="344">memory_size</references>
        <references refid="memory_management_8c_1a8a12d29f1824bf7225965e8b35a0f3a8" compoundref="memory_management_8c" startline="194" endline="205">memory_free</references>
        <referencedby refid="user_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="user_8c" startline="87" endline="207">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1a401d53c4641dc4f12bc3251d36d1bfe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int memory_size</definition>
        <argsstring>(void *pointer)</argsstring>
        <name>memory_size</name>
        <param>
          <type>void *</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="330" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="330" bodyend="344"/>
        <references refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" compoundref="memory_management_8h" startline="45">INITIAL_ZERO</references>
        <references refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" compoundref="memory_management_8c" startline="39">head</references>
        <references refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" compoundref="memory_management_8h" startline="67">_info_area::start</references>
        <references refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" compoundref="memory_management_8h" startline="68">_info_area::end</references>
        <references refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" compoundref="memory_management_8h" startline="46">EXCESS</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <referencedby refid="memory_management_8h_1aeae46c0f1bc40e0e3b469f40feefd8d0" compoundref="memory_management_8c" startline="294" endline="318">memory_realloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="memory_management_8c_1a5e16e5d3309afde94b8d6f9fc6f2364a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref></type>
        <definition>status display_list</definition>
        <argsstring>()</argsstring>
        <name>display_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" line="357" column="1" bodyfile="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c" bodystart="357" bodyend="391"/>
        <references refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" compoundref="memory_management_8h" startline="45">INITIAL_ZERO</references>
        <references refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" compoundref="memory_management_8c" startline="39">head</references>
        <references refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" compoundref="memory_management_8h" startline="66">_info_area::status</references>
        <references refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" compoundref="memory_management_8h" startline="48">EMPTY</references>
        <references refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" compoundref="memory_management_8h" startline="68">_info_area::end</references>
        <references refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" compoundref="memory_management_8h" startline="67">_info_area::start</references>
        <references refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" compoundref="memory_management_8h" startline="46">EXCESS</references>
        <references refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" compoundref="memory_management_8h" startline="69">_info_area::next</references>
        <references refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" compoundref="user_8c" startline="29">MAX_SIZE</references>
        <references refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" compoundref="memory_management_8h" startline="55">TRUE</references>
        <referencedby refid="user_8c_1ae66f6b31b5ad750f1fe042a706a4e3d4" compoundref="user_8c" startline="87" endline="207">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*******************************************************************************<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memoryManagement.c</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>@file<sp/><sp/><sp/>memoryManagement.c</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>@brief<sp/><sp/>This<sp/>program<sp/>has<sp/>the<sp/>library<sp/>functions<sp/>for<sp/>allocating<sp/>memory,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deallocating<sp/>memory<sp/>and<sp/>displaying<sp/>the<sp/>size<sp/>of<sp/>free<sp/>memory<sp/>and<sp/></highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>memory.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memory_alloc<sp/>function-This<sp/>function<sp/>provides<sp/>memory<sp/>dynamically<sp/>to<sp/></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user.<sp/><sp/></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memory_free<sp/>function-This<sp/>function<sp/>frees<sp/>the<sp/>space<sp/>allocated<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user<sp/>in<sp/>the<sp/>created<sp/>heap<sp/>space<sp/>under<sp/>user&apos;s<sp/>request.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memory_calloc<sp/>function-This<sp/>function<sp/>provides<sp/>memory<sp/>dynamically<sp/>to<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>user<sp/>in<sp/>asked<sp/>number<sp/>of<sp/>blocks<sp/>of<sp/>specified<sp/>size<sp/>and<sp/>intialise<sp/>them<sp/></highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memory_realloc<sp/>function-This<sp/>function<sp/>reallocates<sp/>memory<sp/>to<sp/>the<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previously<sp/>allocated<sp/>memory<sp/>pointer<sp/>by<sp/>asking<sp/>the<sp/>user<sp/>,the<sp/>already<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated<sp/>pointer<sp/>and<sp/>size<sp/>to<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memory_size<sp/>function-<sp/>This<sp/>function<sp/>calculates<sp/>the<sp/>size<sp/>of<sp/>pointer.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*memory_information-This<sp/>function<sp/>gives<sp/>the<sp/>information<sp/>about<sp/>how<sp/>much</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory<sp/>is<sp/>allocated<sp/>and<sp/>how<sp/>much<sp/>memory<sp/>is<sp/>free<sp/>in<sp/>given<sp/>allocated</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>space.<sp/><sp/></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>Include<sp/>files</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memory_management_8h" kindref="compound">memoryManagement.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>EXTERNAL<sp/>VARIABLE<sp/>DEFINITIONS</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="memory_management_8h_1a26aeebe75887b4360c73659342f5dc61" refkind="member"><highlight class="normal"><ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref><sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref><sp/>;</highlight></codeline>
<codeline lineno="37" refid="memory_management_8h_1ac2101dd85dcd849ee5f0a1c192015c68" refkind="member"><highlight class="normal"><ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref><sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref><sp/>;</highlight></codeline>
<codeline lineno="38" refid="memory_management_8h_1a1aa769b6f82cf2e92f748561d87a8ca6" refkind="member"><highlight class="normal"><ref refid="memory_management_8c_1a7d545f1851a11aa5a292886d35957bdc" kindref="member">sizeOfNode</ref><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>)<sp/>;</highlight></codeline>
<codeline lineno="39" refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*<ref refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" kindref="member">head</ref><sp/>=<sp/>NULL<sp/>,<sp/>*<ref refid="memory_management_8c_1addbea52120befa5218ab585272604dd5" kindref="member">current</ref><sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>provides<sp/>memory<sp/>dynamically<sp/>to<sp/>user.<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>size<sp/>-<sp/>It<sp/>takes<sp/>size<sp/>as<sp/>arguement<sp/>from<sp/>user<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>It<sp/>returns<sp/>NULL<sp/>if<sp/>it<sp/>can&apos;t<sp/>give<sp/>user<sp/>required<sp/>memory<sp/>or<sp/>it<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>returns<sp/>base<sp/>address<sp/>of<sp/>the<sp/>memory<sp/>which<sp/>it<sp/>allocates<sp/>to<sp/>user<sp/>dynamically.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="memory_management_8h_1ae30a35d507593a3635856b601305dd38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="memory_management_8c_1ae30a35d507593a3635856b601305dd38" kindref="member">memory_alloc</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(size<sp/>&lt;=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref>)<sp/></highlight><highlight class="comment">/*if<sp/>users<sp/>asks<sp/>for<sp/>size<sp/>0<sp/>or<sp/>less<sp/>it<sp/>prints<sp/>error*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nIvalid<sp/>Size\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/><ref refid="memory_management_8c_1a0ee12c76feab0bfc62d67af9989f828d" kindref="member">check_for_chunk_space</ref>(<sp/>size<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*first<sp/>it<sp/>search<sp/>required<sp/>memory<sp/>from<sp/>chunk<sp/>spaces*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ptr<sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>it<sp/>finds<sp/>required<sp/>memory<sp/>from<sp/>chunk<sp/>spaces<sp/>then<sp/>it<sp/>return<sp/>base</highlight></codeline>
<codeline lineno="67"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>address<sp/>from<sp/>chunk<sp/>space*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>no<sp/>space<sp/>is<sp/>available<sp/>in<sp/>chunk<sp/>space<sp/>then<sp/>it<sp/>search<sp/>from<sp/>available</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>memory<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref><sp/>&gt;=<sp/><ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref><sp/>+<sp/>size)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>&amp;heapArea[<ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref>];</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1ae134f9f03edd9c11c52eb9e3887911da" kindref="member">add_node_to_list</ref>(<sp/><ref refid="memory_management_8c_1ac30901f2f52d2898523245fe4ad744a0" kindref="member">create_node</ref><sp/>(<sp/>size<sp/>)<sp/>)<sp/>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr<sp/>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*if<sp/>no<sp/>memory<sp/>is<sp/>available<sp/>from<sp/>chunk<sp/>or<sp/>available<sp/>memory<sp/>then<sp/>it<sp/>returns<sp/>NULL*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>adds<sp/>a<sp/>newly<sp/>created<sp/>_info_area<sp/>to<sp/>linked<sp/>list.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>newNode<sp/>-<sp/>this<sp/>take<sp/>structure<sp/>pointer<sp/>as<sp/>input(or<sp/>a<sp/>pointer)</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>pointing<sp/>to<sp/>newly<sp/>created<sp/>_info_area.</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>Always<sp/>returns<sp/>TRUE<sp/>as<sp/>status</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="memory_management_8h_1a95bbb648d6b9dcbeb6377570f5dde789" refkind="member"><highlight class="normal"><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref><sp/><ref refid="memory_management_8c_1ae134f9f03edd9c11c52eb9e3887911da" kindref="member">add_node_to_list</ref>(<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode<sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>__fpurge(<sp/>stdin<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>linked<sp/>list<sp/>is<sp/>empty*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>NULL<sp/>==<sp/>head<sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>=<sp/>newNode<sp/>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1addbea52120befa5218ab585272604dd5" kindref="member">current</ref><sp/>=<sp/>newNode<sp/>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*If<sp/>linked<sp/>list<sp/>is<sp/>non<sp/>empty*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1addbea52120befa5218ab585272604dd5" kindref="member">current</ref>-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref><sp/>=<sp/>newNode<sp/>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1addbea52120befa5218ab585272604dd5" kindref="member">current</ref><sp/>=<sp/>newNode<sp/>;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>creates<sp/>a<sp/>node<sp/>in<sp/>the<sp/>info<sp/>area<sp/>to<sp/>have<sp/>a<sp/>track<sp/>of<sp/>data</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/>*<sp/>through<sp/>linked<sp/>list<sp/>format.<sp/></highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>size<sp/>-<sp/>It<sp/>takes<sp/>size<sp/>as<sp/>arguement<sp/>from<sp/>user<sp/>.</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>returns<sp/>the<sp/>pointer<sp/>for<sp/>the<sp/>created<sp/>node<sp/>to<sp/>the<sp/>linked<sp/>list.</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="memory_management_8h_1ac30901f2f52d2898523245fe4ad744a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref>*<sp/><ref refid="memory_management_8c_1ac30901f2f52d2898523245fe4ad744a0" kindref="member">create_node</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode<sp/>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)&amp;infoArea[<ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref>]<sp/>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>=<sp/><ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref><sp/>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref><sp/>=<sp/><ref refid="memory_management_8h_1a07f4c6f14c1c3bcd57756a5e3a41e3bd" kindref="member">FILLED</ref><sp/>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>=<sp/><ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref><sp/>+<sp/>size<sp/>-<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref><sp/>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref><sp/>=<sp/>NULL<sp/>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref><sp/>=<sp/><ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref><sp/>+<sp/><ref refid="memory_management_8c_1a7d545f1851a11aa5a292886d35957bdc" kindref="member">sizeOfNode</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref><sp/>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref><sp/>=<sp/><ref refid="memory_management_8c_1a64b0840001d30ff8cd416759a03542ce" kindref="member">in</ref><sp/>+<sp/>size<sp/>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newNode<sp/>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>Gives<sp/>the<sp/>information<sp/>about<sp/>the<sp/>memory<sp/>allocated<sp/>in<sp/>the<sp/>heap<sp/>space</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>and<sp/>free<sp/>memory<sp/>in<sp/>the<sp/>heap<sp/>space.</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/><sp/>Always<sp/>returns<sp/>TRUE<sp/>as<sp/>status.</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="memory_management_8h_1a4445092804b80242b5a1c124978837e8" refkind="member"><highlight class="normal"><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref><sp/><ref refid="memory_management_8c_1a4445092804b80242b5a1c124978837e8" kindref="member">memory_information</ref>()</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunkNumber<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sumOfChunks<sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=<ref refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref><sp/>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newNode<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="memory_management_8h_1a07f4c6f14c1c3bcd57756a5e3a41e3bd" kindref="member">FILLED</ref><sp/>==<sp/>newNode-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>+<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;chunk<sp/>#%d<sp/>:%d\n&quot;</highlight><highlight class="normal">,<sp/>chunkNumber<sp/>,<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumOfChunks=sumOfChunks<sp/>+newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunkNumber++;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Memory<sp/>is<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Memory<sp/>in<sp/>use<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><sp/>sum);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Free<sp/>Memory<sp/>other<sp/>then<sp/>Chunk<sp/>is<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref><sp/>-<sp/>sum);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>free<sp/>chunk<sp/>Memory<sp/>is<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><sp/>sumOfChunks);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Free<sp/>Memory<sp/>:%d\n\n&quot;</highlight><highlight class="normal">,<ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref><sp/>-<sp/>sum<sp/>+<sp/>sumOfChunks);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>frees<sp/>the<sp/>space<sp/>allocated<sp/>for<sp/>the<sp/>user<sp/>in<sp/>the<sp/>created<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>heap<sp/>space<sp/>under<sp/>user&apos;s<sp/>request.</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>void<sp/>pointer<sp/>,the<sp/>pointer<sp/>holding<sp/>the<sp/>address<sp/>to<sp/>be<sp/>freed<sp/>.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>Always<sp/>returns<sp/>TRUE<sp/>as<sp/>status.</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="memory_management_8h_1a8a12d29f1824bf7225965e8b35a0f3a8" refkind="member"><highlight class="normal"><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref><sp/><ref refid="memory_management_8c_1a8a12d29f1824bf7225965e8b35a0f3a8" kindref="member">memory_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pointer)</highlight></codeline>
<codeline lineno="195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode<sp/>=<sp/><ref refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)&amp;heapArea[newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref>]!=(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)pointer)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref><sp/>=<sp/><ref refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" kindref="member">EMPTY</ref>;</highlight><highlight class="comment">/*<sp/>status<sp/>is<sp/>again<sp/>changed<sp/>back<sp/>to<sp/>zero<sp/>such<sp/>that<sp/>the<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>space<sp/>to<sp/>be<sp/>freed<sp/>can<sp/>be<sp/>used<sp/>as<sp/>chunk<sp/>space.*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="209"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>When<sp/>memory<sp/>is<sp/>freed<sp/>lots<sp/>of<sp/>chunk<sp/>spaces<sp/>remain<sp/>inbetween.<sp/>So<sp/>this</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/>function<sp/>search<sp/>if<sp/>these<sp/>is<sp/>some<sp/>chunk<sp/>space<sp/>in<sp/>between<sp/>which<sp/>can<sp/>be<sp/>used<sp/>when</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>memory_alloc<sp/>is<sp/>called<sp/>by<sp/>user.</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>size<sp/>-<sp/>Size<sp/>to<sp/>be<sp/>allocated<sp/>to<sp/>user</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>It<sp/>returns<sp/>NULL<sp/>if<sp/>no<sp/>chunk<sp/>space<sp/>of<sp/>size<sp/>is<sp/>available<sp/>else</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>returns<sp/>the<sp/>base<sp/>address<sp/>of<sp/>chunk<sp/>space<sp/>which<sp/>is<sp/>available.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="memory_management_8h_1a0ee12c76feab0bfc62d67af9989f828d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="memory_management_8c_1a0ee12c76feab0bfc62d67af9989f828d" kindref="member">check_for_chunk_space</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=<ref refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>While<sp/>loop<sp/>checks<sp/>if<sp/>size<sp/>required<sp/>by<sp/>user<sp/>is<sp/>less<sp/>then<sp/>memory<sp/>available</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>in<sp/>chunk<sp/>spaces.<sp/>If<sp/>size<sp/>can<sp/>be<sp/>allocated<sp/>then<sp/>status<sp/>of<sp/>_info_area<sp/>is<sp/>set<sp/>to<sp/>1</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>which<sp/>means<sp/>this<sp/>memory<sp/>is<sp/>now<sp/>allocated.<sp/>And<sp/>remaing<sp/>chunk<sp/>space<sp/>other</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/><sp/>*<sp/>other<sp/>then<sp/>what<sp/>allocated<sp/>still<sp/>have<sp/>status<sp/>as<sp/>0.</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newNode!=NULL)</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((newNode-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref><sp/>==<sp/><ref refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" kindref="member">EMPTY</ref>)<sp/>&amp;&amp;<sp/>(newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref><sp/>&gt;=<sp/>size))</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref><sp/>=<sp/><ref refid="memory_management_8h_1a07f4c6f14c1c3bcd57756a5e3a41e3bd" kindref="member">FILLED</ref>;<sp/></highlight><highlight class="comment">/*changing<sp/>status<sp/>to<sp/>1<sp/>if<sp/>required<sp/>size<sp/>is<sp/>available*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>=<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/>size<sp/>-<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newest_node;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newest_node<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)&amp;infoArea[<ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref>];<sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*createing<sp/>new<sp/>_info_area<sp/>for<sp/>remaining<sp/>chunk<sp/>space*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newest_node-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>=<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newest_node-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref><sp/>=<sp/><ref refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" kindref="member">EMPTY</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newest_node-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>=<sp/>temp;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newest_node-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>=newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref><sp/>=<sp/><ref refid="memory_management_8c_1a076f09d09570b6fb22632de428a3ec5e" kindref="member">areaIndex</ref><sp/>+<sp/><ref refid="memory_management_8c_1a7d545f1851a11aa5a292886d35957bdc" kindref="member">sizeOfNode</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref><sp/>=<sp/>newest_node;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;heapArea[newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref>];</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*returning<sp/>base<sp/>address<sp/>from<sp/>available<sp/>memory*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*returning<sp/>NULL<sp/>if<sp/>required<sp/>size<sp/>is<sp/>not<sp/>available*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>provides<sp/>memory<sp/>dynamically<sp/>to<sp/>user<sp/>in<sp/>asked<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/>*<sp/>blocks<sp/>of<sp/>specified<sp/>size<sp/>and<sp/>intialise<sp/>them<sp/>to<sp/>zero.</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>nelem-number<sp/>of<sp/>blocks,elsize-size<sp/>requested<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>It<sp/>returns<sp/>NULL<sp/>if<sp/>it<sp/>can&apos;t<sp/>give<sp/>user<sp/>required<sp/>memory<sp/>or<sp/>it<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/>*<sp/>returns<sp/>base<sp/>address<sp/>of<sp/>the<sp/>memory<sp/>which<sp/>it<sp/>allocates<sp/>to<sp/>user<sp/>dynamically.</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="memory_management_8h_1a9fddae3713297adcee22fae422fe4383" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="memory_management_8c_1a9fddae3713297adcee22fae422fe4383" kindref="member">memory_calloc</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nelem,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>elsize)<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal">{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>nelem<sp/>*<sp/>elsize;<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nelem<sp/>&lt;=<sp/>0<sp/>||<sp/>elsize<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/><ref refid="memory_management_8c_1ae30a35d507593a3635856b601305dd38" kindref="member">memory_alloc</ref>(size);</highlight><highlight class="comment">/*<sp/>the<sp/>total<sp/>size<sp/>is<sp/>calculated<sp/>and<sp/>allocated</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>the<sp/>created<sp/>heap<sp/>space<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(ptr,<sp/>0,<sp/>size);</highlight><highlight class="comment">/*<sp/>the<sp/>size<sp/>intialised<sp/>to<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="282"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="283"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="286"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>reallocates<sp/>memory<sp/>to<sp/>the<sp/>previously<sp/>allocated<sp/>memory<sp/></highlight></codeline>
<codeline lineno="287"><highlight class="comment"><sp/>*<sp/>pointer<sp/>by<sp/>asking<sp/>the<sp/>user<sp/>,the<sp/>already<sp/>allocated<sp/>pointer<sp/>and<sp/>size<sp/>to<sp/>be<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="comment"><sp/>*<sp/>allocated.<sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>pointer<sp/>to<sp/>be<sp/>realocated<sp/>and<sp/>size<sp/>to<sp/>be<sp/>allocated.</highlight></codeline>
<codeline lineno="290"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>It<sp/>returns<sp/>NULL<sp/>if<sp/>it<sp/>can&apos;t<sp/>give<sp/>user<sp/>required<sp/>memory<sp/>or<sp/>it<sp/></highlight></codeline>
<codeline lineno="291"><highlight class="comment"><sp/>*<sp/>returns<sp/>base<sp/>address<sp/>of<sp/>the<sp/>memory<sp/>which<sp/>it<sp/>allocates<sp/>to<sp/>user<sp/>dynamically.</highlight></codeline>
<codeline lineno="292"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="memory_management_8h_1aeae46c0f1bc40e0e3b469f40feefd8d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="memory_management_8c_1aeae46c0f1bc40e0e3b469f40feefd8d0" kindref="member">memory_realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/></highlight><highlight class="comment">/*<sp/>if<sp/>new<sp/>memory<sp/>need<sp/>to<sp/>be<sp/>allocated<sp/>then<sp/>memory_alloc<sp/>function<sp/></highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*is<sp/>called<sp/>and<sp/>its<sp/>address<sp/>is<sp/>returned<sp/>to<sp/>user<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="memory_management_8c_1ae30a35d507593a3635856b601305dd38" kindref="member">memory_alloc</ref>(size);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="memory_management_8c_1a401d53c4641dc4f12bc3251d36d1bfe3" kindref="member">memory_size</ref>(ptr)<sp/>&lt;<sp/>size)<sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/><ref refid="memory_management_8c_1ae30a35d507593a3635856b601305dd38" kindref="member">memory_alloc</ref>(size);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>using<sp/>memcpy<sp/>the<sp/>contents<sp/>are<sp/>moved<sp/>from<sp/>memory<sp/>area<sp/>source<sp/>to<sp/>the<sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/><sp/><sp/><sp/>memory<sp/>area<sp/>destination<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(</highlight><highlight class="keyword">new</highlight><highlight class="normal">,<sp/>ptr,<sp/><ref refid="memory_management_8c_1a401d53c4641dc4f12bc3251d36d1bfe3" kindref="member">memory_size</ref>(ptr));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="memory_management_8c_1a8a12d29f1824bf7225965e8b35a0f3a8" kindref="member">memory_free</ref>(ptr);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>=<sp/>ptr;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>This<sp/>function<sp/>calculates<sp/>the<sp/>size<sp/>of<sp/>pointer.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/>*<sp/>Param[in]<sp/><sp/>-<sp/>pointer<sp/>given<sp/>by<sp/>the<sp/>user.</highlight></codeline>
<codeline lineno="327"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-<sp/>memory_available-size<sp/>of<sp/>the<sp/>pointer<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="memory_management_8h_1a3e2309af44a44009e20dea96b76a5f06" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="memory_management_8c_1a401d53c4641dc4f12bc3251d36d1bfe3" kindref="member">memory_size</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pointer)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memory_available<sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref>;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=<ref refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)&amp;heapArea[newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref>]!=(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)pointer)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)&amp;heapArea[newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref>]==(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*)pointer)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memory_available<sp/>=<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref><sp/>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>memory_available;</highlight></codeline>
<codeline lineno="344"><highlight class="normal">}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/>*<sp/>API<sp/>DEFINITION</highlight></codeline>
<codeline lineno="348"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="comment">/*******************************************************************************</highlight></codeline>
<codeline lineno="351"><highlight class="comment"><sp/>*<sp/>Brief<sp/>-<sp/>displays<sp/>information<sp/>about<sp/>total<sp/>memory,used<sp/>memory,total<sp/>free<sp/>memory</highlight></codeline>
<codeline lineno="352"><highlight class="comment"><sp/>*<sp/>other<sp/>than<sp/>chunk,total<sp/>free<sp/>memory<sp/>and<sp/>total<sp/>free<sp/>chunk<sp/>memory.</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/>*<sp/>Return<sp/><sp/><sp/><sp/><sp/>-true<sp/>-<sp/>always<sp/>return<sp/>true<sp/>as<sp/>status.</highlight></codeline>
<codeline lineno="354"><highlight class="comment"><sp/>******************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="memory_management_8h_1a5e16e5d3309afde94b8d6f9fc6f2364a" refkind="member"><highlight class="normal"><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959" kindref="member">status</ref><sp/><ref refid="memory_management_8c_1a5e16e5d3309afde94b8d6f9fc6f2364a" kindref="member">display_list</ref>()</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chunk_number<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sum;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sumOfChunks<sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref>;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__info__area" kindref="compound">_info_area</ref><sp/>*newNode;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode<sp/>=<sp/><ref refid="memory_management_8c_1a13b95480ca1ec551d303fb6b31b5ee9d" kindref="member">head</ref>;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>sum<sp/>=<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref>;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(newNode<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>status<sp/>empty<sp/>implies<sp/><sp/>chunk<sp/>space<sp/>is<sp/>available<sp/>and<sp/>chunk<sp/>space<sp/>is<sp/></highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNode-&gt;<ref refid="struct__info__area_1a6e27f49150e9a14580fb313cc2777e00" kindref="member">status</ref><sp/>==<sp/><ref refid="memory_management_8h_1a2b7cf2a3641be7b89138615764d60ba3" kindref="member">EMPTY</ref>)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>&gt;<sp/><ref refid="memory_management_8h_1a4d11bc62f87fecb66ddb08bbe922e468" kindref="member">INITIAL_ZERO</ref>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;chunk<sp/>#%d<sp/>:%d\n&quot;</highlight><highlight class="normal">,<sp/>chunk_number<sp/>,<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sumOfChunks=sumOfChunks<sp/>+newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk_number++;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculates<sp/>used<sp/>memory<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>=<sp/>sum<sp/>+<sp/>newNode-&gt;<ref refid="struct__info__area_1abce9f5dc9c83f2639b72024fdee5d388" kindref="member">end</ref><sp/>-<sp/>newNode-&gt;<ref refid="struct__info__area_1a37722a150250e2a5a98e5e0d11e53449" kindref="member">start</ref><sp/>+<sp/><ref refid="memory_management_8h_1a5ce8e34830796387c57019ed0548fef1" kindref="member">EXCESS</ref>;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>newNode=newNode-&gt;<ref refid="struct__info__area_1a50e27729cb837299c9b6d2464b6ebff4" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Memory<sp/>is<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Memory<sp/>in<sp/>use<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>sum);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Free<sp/>Memory<sp/>other<sp/>then<sp/>Chunk<sp/>is<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref><sp/>-<sp/>sum);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>chunk<sp/>Memory<sp/>is<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><sp/>sumOfChunks);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Total<sp/>Free<sp/>Memory<sp/>:%d\n\n&quot;</highlight><highlight class="normal">,<ref refid="user_8c_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref><sp/>-<sp/>sum<sp/>+<sp/>sumOfChunks);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="memory_management_8h_1a015eb90e0de9f16e87bd149d4b9ce959aa82764c3079aea4e60c80e45befbb839" kindref="member">TRUE</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/cisadmin/Desktop/M1032348/mini_project/source_code/Implementation1/src/memoryManagement.c"/>
  </compounddef>
</doxygen>
